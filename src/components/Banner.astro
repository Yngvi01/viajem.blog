---
import YukinaConfig from "../../yukina.config";
import { GetCoverURLForUnspecifiedEntry } from "../utils/cover";
import { Image } from "astro:assets";
import { getImageSource } from "../utils/imageImports";
import OptimizedImage from "./OptimizedImage.astro";

export interface Props {
  title?: string;
  subTitle?: string;
  bannerImage?: string;
  slug?: string;
}

const { title, subTitle, bannerImage, slug } = Astro.props;

const hasTitle = title !== undefined || subTitle !== undefined;
// Sempre usar o slideshow, independentemente de haver uma imagem específica
const hasHeaderImg = false;

let carouselImgsList = YukinaConfig.banners;
const carouselAnimationTime = `${carouselImgsList.length * 6}s`;
---

<div id="banner" class="banner onload-animation-fade-in" role="banner" aria-label="Site banner">
  <div class="transition-main banner-inner h-full w-full">
    {
      !hasHeaderImg && (
        <div class="carousel" role="region" aria-label="Image carousel">
          <ul id="carousel_imgs" aria-live="polite">
            {carouselImgsList.map((img, index) => (
              <li
                class={`item lozad ${index === 0 ? 'first-banner' : ''}`}
                style={{ animationDelay: `${index * 6}s` }}
                data-background-image={img.url}
                data-width={img.width}
                data-height={img.height}
                data-srcset={`${img.url} ${img.width}w`}
                data-sizes="(max-width: 640px) 100vw, (max-width: 1024px) 100vw, 100vw"
                role="img"
                aria-label={img.alt}
              />
            ))}
          </ul>
        </div>
      )
    }
    {
      hasHeaderImg && (
        <div class="cover">
          <OptimizedImage
            src={getImageSource(bannerImage) ?? GetCoverURLForUnspecifiedEntry(slug ?? "")}
            width={1280}
            height={720}
            class="item"
            alt={title ? `Imagem de capa para: ${title}` : "Imagem de capa do blog"}
            loading="eager"
            quality={80}
            format="webp"
            fetchpriority="high"
            sizes="(max-width: 640px) 100vw, 1280px"
          />
        </div>
      )
    }
    <div class="relative h-[95%] w-full">
      <div
        class="absolute left-1/2 top-1/2 w-4/5 -translate-x-1/2 -translate-y-1/2 lg:w-3/4"
      >
        <div class="flex flex-col items-center justify-center text-center">
          <h1
            class:list={[hasTitle ? "title-normal" : "title-index"]}
            class="title"
          >
            {title ?? YukinaConfig.title}
          </h1>
          <h2 class="subtitle">{subTitle ?? YukinaConfig.subTitle}</h2>
        </div>
      </div>
    </div>
  </div>
  <div class="waves" id="header-waves" aria-hidden="true">
    <svg
      class="waves"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      viewBox="0 24 150 28"
      preserveAspectRatio="none"
      shape-rendering="auto"
      role="img"
      aria-label="Decorative wave pattern"
    >
      <defs>
        <path
          id="gentle-wave"
          d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"
        ></path>
      </defs>
      <g class="parallax">
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="0"
          class="opacity-25"
          style={{ animationDelay: "-2s", animationDuration: "7s" }}></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="3"
          class="opacity-50"
          style={{ animationDelay: "-3s", animationDuration: "10s" }}></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="5"
          class="opacity-75"
          style={{ animationDelay: "-4s", animationDuration: "13s" }}></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="7"
          style={{ animationDelay: "-5s", animationDuration: "20s" }}></use>
      </g>
    </svg>
  </div>
</div>

<script src="/banner-optimization.js" defer></script>

<style define:vars={{ carouselAnimationTime }}>
  .banner {
    @apply relative h-[calc(var(--banner-height)*3/4)] opacity-100 lg:h-[var(--banner-height)];
    contain: layout paint; /* Melhorar performance de renderização */
  }

  .banner-inner {
    overflow: hidden;
    position: relative;
    will-change: transform; /* Otimizar para animações */
  }

  .carousel {
    @apply absolute left-0 top-0 -z-10 block h-[calc(var(--banner-height)*3/4)] w-full overflow-hidden bg-white lg:h-[var(--banner-height)];
    animation-fill-mode: forwards;
    contain: content; /* Melhorar performance de renderização */
  }

  .carousel::before {
    @apply absolute left-0 top-0 z-10 block h-full w-full bg-black/25 transition-all content-[''];
    @apply dark:bg-black/30;
  }

  .carousel .item {
    @apply absolute left-0 top-0 z-0 h-full w-full origin-center bg-cover bg-center bg-no-repeat opacity-0;
    animation: carousel-animation var(--carouselAnimationTime) linear infinite
      0s;
    backface-visibility: hidden;
    transform-style: preserve-3d;
    will-change: opacity, transform; /* Otimizar para animações */
  }
  
  /* Classe adicionada quando a imagem é carregada */
  .carousel .item.loaded {
    @apply opacity-0; /* Mantém a opacidade controlada pela animação */
  }
  
  /* Otimizações específicas para dispositivos móveis */
  @media (max-width: 640px) {
    .carousel .item {
      background-size: cover; /* Garantir que a imagem cubra o elemento */
      animation-duration: calc(var(--carouselAnimationTime) * 1.2); /* Animação mais lenta em dispositivos móveis */
    }
  }

  .cover {
    @apply absolute left-0 top-0 z-0 block h-[var(--banner-height)] w-full overflow-hidden bg-white;
  }

  .cover::before {
    @apply absolute left-0 top-0 z-10 block h-full w-full bg-black/25 transition-all content-[''];
    @apply dark:bg-black/30;
  }

  .cover .item {
    width: 100%;
    height: 100%;
    object-fit: cover;
    background-size: cover;
    background-position: center;
  }

  .title {
    @apply mt-8 text-center font-bold text-[var(--title-color)] drop-shadow-lg lg:mt-4;
    font-family: var(--title-font);
  }

  .title-index {
    @apply mb-0 text-5xl leading-[4rem] lg:text-6xl;
  }

  .title-normal {
    @apply mb-1 text-4xl lg:text-2xl;
  }

  .subtitle {
    @apply text-center text-2xl text-[var(--subtitle-color)] drop-shadow-md lg:text-3xl;
    font-family: var(--subtitle-font);
  }

  .waves {
    @apply absolute bottom-0 left-0 right-0 w-full;
    height: 12vh;
    max-height: 9.375rem;
    min-height: 3.125rem;
    @apply lg:h-[18vh];
  }

  .waves > .parallax use {
    @apply fill-[var(--background-color)];
    animation: wave 25s cubic-bezier(0.5, 0.5, 0.45, 0.5) infinite;
  }

  @keyframes wave {
    0% {
      transform: translate3d(-90px, 0, 0);
    }
    100% {
      transform: translate3d(85px, 0, 0);
    }
  }

  @media (min-width: 1024px) {
    .waves {
      height: 12vh;
    }
    .banner {
      @apply relative opacity-100;
      height: 100%;
    }

    .waves > .parallax use {
      animation: wave 25s cubic-bezier(0.5, 0.5, 0.45, 0.5) infinite;
    }

    .title-normal {
      @apply text-4xl lg:text-6xl;
    }

    .title-index {
      @apply text-6xl leading-[5rem] lg:text-8xl;
    }

    .subtitle {
      @apply text-2xl lg:text-3xl;
      padding-top: 5px;
    }
  }

  @keyframes banner-onload-animation {
    0% {
      opacity: 0;
      height: calc(var(--banner-height) + 4rem);
    }
    100% {
      opacity: 1;
      height: var(--banner-height);
    }
  }
  @media (max-width: 640px) {
    .title-index {
      font-size: 2.5rem;
      line-height: 3rem;
    }
    .title-normal {
      font-size: 1.75rem;
      line-height: 2.4rem;
    }
    .subtitle {
      font-size: 1.3rem;
      line-height: 1.2rem;
    }
  }
</style>
