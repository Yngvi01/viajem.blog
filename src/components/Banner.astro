---
import YukinaConfig from "../../yukina.config";
import { GetCoverURLForUnspecifiedEntry } from "../utils/cover";
import { Image } from "astro:assets";
import { getImageSource } from "../utils/imageImports";

export interface Props {
  title?: string;
  subTitle?: string;
  bannerImage?: string;
  slug?: string;
}

const { title, subTitle, bannerImage, slug } = Astro.props;

const hasTitle = title !== undefined || subTitle !== undefined;
const carouselImgsList = YukinaConfig.banners.map(img => ({
  ...img,
  url: new URL(img.url.startsWith('http') ? img.url : img.url.startsWith('/') ? img.url : `/${img.url}`, Astro.url.origin).href
}));
const carouselAnimationTime = `${carouselImgsList.length * 6}s`;
---

<div id="banner" class="banner" role="banner" aria-label="Site banner">
  <div class="transition-main banner-inner h-full w-full">
    <div class="carousel" role="region" aria-label="Image carousel">
      <ul id="carousel_imgs" aria-live="polite">
        {carouselImgsList.map((img, index) => (
          <li
            class={`item ${index === 0 ? 'first-banner' : ''}`}
            style={{
              animationDelay: `${index * 6}s`,
              backgroundImage: `url("${img.url}")`
            }}
            data-width={img.width}
            data-height={img.height}
            role="img"
            aria-label={img.alt}
          />
        ))}
      </ul>
    </div>
    <div class="relative h-[95%] w-full">
      <div
        class="absolute left-1/2 top-1/2 w-4/5 -translate-x-1/2 -translate-y-1/2 lg:w-3/4"
      >
        <div class="flex flex-col items-center justify-center text-center">
          <h1
            class:list={[hasTitle ? "title-normal" : "title-index"]}
            class="title"
          >
            {title ?? YukinaConfig.title}
          </h1>
          <h2 class="subtitle">{subTitle ?? YukinaConfig.subTitle}</h2>
        </div>
      </div>
    </div>
  </div>
  <div class="waves" id="header-waves" aria-hidden="true">
    <svg
      class="waves"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      viewBox="0 24 150 28"
      preserveAspectRatio="none"
      shape-rendering="auto"
      role="img"
      aria-label="Decorative wave pattern"
    >
      <defs>
        <path
          id="gentle-wave"
          d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"
        ></path>
      </defs>
      <g class="parallax">
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="0"
          class="opacity-25"
          style={{ animationDelay: "-2s", animationDuration: "7s" }}></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="3"
          class="opacity-50"
          style={{ animationDelay: "-3s", animationDuration: "10s" }}></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="5"
          class="opacity-75"
          style={{ animationDelay: "-4s", animationDuration: "13s" }}></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="7"
          style={{ animationDelay: "-5s", animationDuration: "20s" }}></use>
      </g>
    </svg>
  </div>
</div>

<script>
  class BannerManager {
    private static instance: BannerManager | null = null;
    private isInitialized: boolean = false;
    private animationStyles: HTMLStyleElement | null = null;
    private bannerElement: HTMLElement | null = null;
    private carouselImgs: HTMLElement | null = null;

    private constructor() {
      this.initEventListeners();
    }

    public static getInstance(): BannerManager {
      if (!BannerManager.instance) {
        BannerManager.instance = new BannerManager();
      }
      return BannerManager.instance;
    }

    private initEventListeners(): void {
      document.addEventListener('DOMContentLoaded', () => this.initBanner());
      document.addEventListener('swup:contentReplaced', () => {
        this.cleanupBanner();
        requestAnimationFrame(() => this.initBanner());
      });
      document.addEventListener('astro:after-swap', () => {
        this.cleanupBanner();
        requestAnimationFrame(() => this.initBanner());
      });
      document.addEventListener('astro:page-load', () => {
        this.cleanupBanner();
        requestAnimationFrame(() => this.initBanner());
      });
    }

    private cleanupBanner(): void {
      if (this.animationStyles) {
        this.animationStyles.remove();
        this.animationStyles = null;
      }
      this.isInitialized = false;
      this.bannerElement = null;
      this.carouselImgs = null;
    }

    private initBanner(): void {
      if (this.isInitialized) return;

      this.bannerElement = document.getElementById('banner');
      if (!this.bannerElement) return;

      this.carouselImgs = document.getElementById('carousel_imgs');
      if (!this.carouselImgs) return;

      this.setupCarouselAnimation();
      this.loadCarouselImages();
      
      requestAnimationFrame(() => {
        if (this.bannerElement) {
          this.bannerElement.classList.add('banner-initialized');
          // Forçar um reflow para garantir que as animações sejam reiniciadas
          void this.bannerElement.offsetHeight;
        }
      });

      this.isInitialized = true;
    }

    private setupCarouselAnimation(): void {
      const carouselImgsCount = this.carouselImgs?.children.length ?? 0;
      if (carouselImgsCount === 0) return;

      this.animationStyles = document.createElement('style');
      this.animationStyles.textContent = `
        @keyframes carousel-animation {
          0% {
            opacity: 0;
            transform: scale(1) translateZ(0);
          }
          3% {
            opacity: 1;
          }
          8% {
            opacity: 1;
            animation-timing-function: ease-out;
          }
          ${100 / carouselImgsCount}% {
            opacity: 1;
          }
          ${100 / carouselImgsCount + 50 / carouselImgsCount}% {
            opacity: 0;
            transform: scale(1.1) translateZ(0);
            animation-timing-function: ease-out;
          }
          100% {
            opacity: 0;
            transform: scale(1) translateZ(0);
          }
        }
      `;

      document.head.appendChild(this.animationStyles);
    }

    private loadCarouselImages(): void {
      if (!this.carouselImgs || this.carouselImgs.children.length === 0) return;

      Array.from(this.carouselImgs.children).forEach((item, index) => {
        const imgElement = item as HTMLElement;
        // Pré-carregar as imagens
        const imgUrl = imgElement.style.backgroundImage.slice(5, -2);
        const img = new Image();
        img.src = imgUrl;
        img.onload = () => {
          imgElement.classList.add('loaded');
          if (index === 0) {
            imgElement.classList.add('active');
          }
        };
      });
    }
  }

  // Iniciar o gerenciador do banner
  BannerManager.getInstance();
</script>

<style define:vars={{ carouselAnimationTime }}>
  .banner {
    @apply relative h-[calc(var(--banner-height)*3/4)] opacity-0 lg:h-[var(--banner-height)];
    transition: opacity 0.5s ease-in-out;
  }

  .banner.banner-initialized {
    opacity: 1;
  }

  .banner-inner {
    overflow: hidden;
    position: relative;
  }

  .carousel {
    @apply absolute left-0 top-0 -z-10 block h-[calc(var(--banner-height)*3/4)] w-full overflow-hidden bg-white lg:h-[var(--banner-height)];
  }

  .carousel::before {
    @apply absolute left-0 top-0 z-10 block h-full w-full bg-black/25 transition-all content-[''];
    @apply dark:bg-black/30;
  }

  .carousel .item {
    @apply absolute left-0 top-0 z-0 h-full w-full origin-center bg-cover bg-center bg-no-repeat opacity-0;
    animation: carousel-animation var(--carouselAnimationTime) linear infinite 0s;
    transform: translateZ(0);
    will-change: transform, opacity;
    visibility: hidden;
  }
  
  .carousel .item.loaded {
    visibility: visible;
  }

  .carousel .item.active {
    opacity: 1;
  }

  .title {
    @apply mt-8 text-center font-bold text-[var(--title-color)] drop-shadow-lg lg:mt-4;
    font-family: var(--title-font);
  }

  .title-index {
    @apply mb-0 text-5xl leading-[4rem] lg:text-6xl;
  }

  .title-normal {
    @apply mb-1 text-4xl lg:text-2xl;
  }

  .subtitle {
    @apply text-center text-2xl text-[var(--subtitle-color)] drop-shadow-md lg:text-3xl;
    font-family: var(--subtitle-font);
  }

  .waves {
    @apply absolute bottom-0 left-0 right-0 w-full;
    height: 12vh;
    max-height: 9.375rem;
    min-height: 3.125rem;
    @apply lg:h-[18vh];
  }

  .waves > .parallax use {
    @apply fill-[var(--background-color)];
    animation: wave 25s cubic-bezier(0.5, 0.5, 0.45, 0.5) infinite;
  }

  @keyframes wave {
    0% {
      transform: translate3d(-90px, 0, 0);
    }
    100% {
      transform: translate3d(85px, 0, 0);
    }
  }

  @media (min-width: 1024px) {
    .waves {
      height: 12vh;
    }
    .banner {
      @apply relative;
      height: 100%;
    }

    .banner.banner-initialized {
      opacity: 1;
    }

    .waves > .parallax use {
      animation: wave 25s cubic-bezier(0.5, 0.5, 0.45, 0.5) infinite;
    }

    .title-normal {
      @apply text-4xl lg:text-6xl;
    }

    .title-index {
      @apply text-6xl leading-[5rem] lg:text-8xl;
    }

    .subtitle {
      @apply text-2xl lg:text-3xl;
      padding-top: 5px;
    }
  }

  @keyframes banner-onload-animation {
    0% {
      opacity: 0;
      height: calc(var(--banner-height) + 4rem);
    }
    100% {
      opacity: 1;
      height: var(--banner-height);
    }
  }
  @media (max-width: 640px) {
    .title-index {
      font-size: 2.5rem;
      line-height: 3rem;
    }
    .title-normal {
      font-size: 1.75rem;
      line-height: 2.4rem;
    }
    .subtitle {
      font-size: 1.3rem;
      line-height: 1.2rem;
    }
  }
</style>

