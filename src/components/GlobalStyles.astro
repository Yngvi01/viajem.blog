---
import "../styles/animations.css";
import "../styles/scrollbar.css";
import "../styles/transitions.css";
import "../styles/searchbar.css";
import "../styles/markdown.css";
import "../styles/accessibility.css";
---

<script>
  // Carregar apenas quando necessário usando Intersection Observer
  // para detectar a necessidade real de scrollbars personalizados
  const loadScrollbarStyles = () => {
    // Detectar elementos que precisariam de scrollbar personalizado
    const detectScrollableContent = () => {
      // Verificar se temos elementos que realmente precisam de scrollbar personalizado
      const hasCodeBlocks = document.querySelectorAll('pre').length > 0;
      const isLongContent = document.body.scrollHeight > window.innerHeight * 1.5;
      
      return hasCodeBlocks || isLongContent;
    };
    
    // Usar requestIdleCallback para não bloquear o carregamento inicial
    const checkAndLoadStyles = () => {
      if (detectScrollableContent()) {
        // Importar CSS diretamente do node_modules usando ESM dinâmico
        import('overlayscrollbars/overlayscrollbars.css')
          .catch(error => {
            console.warn('Erro ao carregar CSS de OverlayScrollbars:', error);
          });
      }
    };
    
    // Usar API de carregamento preguiçoso quando disponível
    if ('requestIdleCallback' in window) {
      (window as any).requestIdleCallback(checkAndLoadStyles, { timeout: 2000 });
    } else {
      // Fallback para browsers mais antigos
      setTimeout(checkAndLoadStyles, 1000);
    }
  };

  // Inicializar verificação uma vez que o DOM estiver pronto
  // Usar { once: true } para remover o listener automaticamente após execução
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadScrollbarStyles, { once: true });
  } else {
    loadScrollbarStyles();
  }
  
  // Adicionar suporte para navegação SPA com Swup
  if (typeof window !== 'undefined') {
    if (window.swup?.hooks) {
      window.swup.hooks.on("content:replace", loadScrollbarStyles);
    } else {
      document.addEventListener("swup:enable", () => {
        window.swup.hooks.on("content:replace", loadScrollbarStyles);
      }, { once: true });
    }
  }
</script>

<style is:global>
  :root {
    --hue: 300;
    --banner-height: 100vh;
    --primary-color: #349168;
    --primary-color-lighten: oklch(95% 0.02 var(--hue));
    --primary-color-hover: oklch(90% 0.025 var(--hue));
    --primary-color-transparent: oklch(70% 0.15 var(--hue) / 15%);
    --text-color: oklch(30% 0 0);
    --text-color-lighten: oklch(50% 0 0);
    --card-color: oklch(100% 0 0);
    --card-color-transparent: oklch(100% 0 0 / 85%);
    --background-color: oklch(97% 0.01 var(--hue));

    --brand-font: "Raleway", "Noto Sans SC", sans-serif;
    --primary-font: "Noto Sans SC", sans-serif;
    --code-font: "JetBrains Mono", "Fira Code", monospace;

    --page-width-lg: 992px;
    --page-width-xl: 1264px;

    --banner-height: 55vh;
    --title-font: var(--brand-font);
    --title-color: oklch(100% 0 0 / 95%);
    --subtitle-font: var(--brand-font);
    --subtitle-color: oklch(100% 0 0 / 85%);

    --onload-animation-delay: 100ms;
    --onload-animation-interval: 100ms;
  }

  :root.dark {
    --primary-color: white;
    --primary-color-lighten: oklch(40% 0.04 var(--hue));
    --primary-color-hover: oklch(20% 0.015 var(--hue));
    --text-color: oklch(95% 0.002 var(--hue));
    --text-color-lighten: oklch(90% 0.002 var(--hue));
    --card-color: oklch(25% 0.02 var(--hue));
    --card-color-lighten: oklch(40% 0.04 var(--hue));
    --card-color-transparent: oklch(30% 0.025 var(--hue) / 85%);
    --background-color: oklch(17.5% 0.015 var(--hue));
  }

  .swup-progress-bar {
    height: 5px;
    background-color: var(--primary-color);
  }
</style>
