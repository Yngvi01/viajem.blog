---
import "../styles/markdown.css";
import OptimizedImage from "../components/OptimizedImage.astro";

export interface Props {
  class?: string;
}

const { class: className } = Astro.props;
---

<div class={`prose prose-sm lg:prose-base dark:prose-invert shrink max-w-full ${className ?? ''}`}>
  <slot />
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const observer = new MutationObserver(addPreCopyButton);
    observer.observe(document.body, { childList: true, subtree: true });
    addPreCopyButton();
  });

  function addPreCopyButton() {
    let codeBlocks = document.querySelectorAll("pre");
    codeBlocks.forEach((codeBlock) => {
      if (codeBlock.parentElement?.classList.contains("code-block")) return;

      let wrapper = document.createElement("div");
      wrapper.className = "relative code-block";

      let copyButton = document.createElement("button");
      copyButton.className =
        "copy-btn btn-regular-dark absolute active:scale-90 h-8 w-8 top-2 right-2 opacity-75 text-sm p-1.5 rounded-lg transition-all ease-in-out";

      let copyIcon = `<svg class="copy-btn-icon copy-icon" xmlns="http://www.w3.org/2000/svg" height="20px" viewBox="0 -960 960 960" width="20px"><path d="M368.37-237.37q-34.48 0-58.74-24.26-24.26-24.26-24.26-58.74v-474.26q0-34.48 24.26-58.74 24.26-24.26 58.74-24.26h378.26q34.48 0 58.74 24.26 24.26 24.26 24.26 58.74v474.26q0 34.48-24.26 58.74-24.26 24.26-58.74 24.26H368.37Zm0-83h378.26v-474.26H368.37v474.26Z"/></svg>`;
      let successIcon = `<svg class="copy-btn-icon success-icon" xmlns="http://www.w3.org/2000/svg" height="20px" viewBox="0 -960 960 960" width="20px"><path d="m389-377.13 294.7-294.7q12.58-12.67 29.52-12.67 16.93 0 29.61 12.67 12.67 12.68 12.67 29.53 0 16.86-12.28 29.14L419.07-288.41q-12.59 12.67-29.52 12.67-16.94 0-29.62-12.67L217.41-430.93q-12.67-12.68-12.79-29.45-.12-16.77 12.55-29.45 12.68-12.67 29.62-12.67 16.93 0 29.28 12.67L389-377.13Z"/></svg>`;
      copyButton.innerHTML = `<div>${copyIcon} ${successIcon}</div>`;

      wrapper.appendChild(codeBlock);
      wrapper.appendChild(copyButton);
      codeBlock.parentNode.insertBefore(wrapper, codeBlock);

      copyButton.addEventListener("click", async () => {
        let text = codeBlock.querySelector("code")?.innerText;
        if (!text) return;
        await navigator.clipboard.writeText(text);
        copyButton.classList.add("success");
        setTimeout(() => copyButton.classList.remove("success"), 1000);
      });
    });
  }
</script>

<style is:inline>
  .btn-regular-dark {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: oklch(0.45 0.01 var(--hue));
  }

  .btn-regular-dark:hover {
    background-color: oklch(0.5 0.01 var(--hue));
  }

  .btn-regular-dark:active {
    background-color: oklch(0.55 0.01 var(--hue));
  }

  .btn-regular-dark.success {
    background-color: oklch(0.75 0.14 var(--hue));
  }

  .copy-btn-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transition: all 0.3s;
    transform: translate(-50%, -50%);
  }

  .copy-btn .copy-icon {
    opacity: 1;
    fill: white;
  }

  .copy-btn.success .copy-icon {
    opacity: 0;
  }

  .copy-btn .success-icon {
    fill: white;
    opacity: 0;
  }

  .copy-btn.success .success-icon {
    opacity: 1;
  }
</style>
