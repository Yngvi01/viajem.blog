---
import YukinaConfig from "../../yukina.config";
import { i18n } from "../locales/translation";

import { Icon } from "astro-icon/components";
import SearchBar from "./SearchBar.svelte";
import MobileSearchBar from "./MobileSearchBar.svelte";
import "astro-pagefind";

const navCount = YukinaConfig.navigators.length;
---

<nav class="nav" id="nav">
  <div
    class="relative flex h-[4rem] w-full items-center justify-between overflow-visible lg:h-[4.5rem]"
  >
    <div class="brand after:content-['']">
      <button
        id="menu-switcher"
        type="button"
        class="h-[40px] w-[44px] content-center"
        aria-label="Abrir menu de navegação"
      >
        <Icon
          id="menu-icon-closed"
          size={24}
          name="line-md:close-to-menu-transition"
          class="mx-auto"
          style="display: block;"
        />
        <Icon
          id="menu-icon-opened"
          size={24}
          name="line-md:menu-to-close-transition"
          class="mx-auto"
          style="display: none;"
        />
      </button>
      <a class="title" href="/">
        {YukinaConfig.brandTitle}
      </a>
    </div>
    <a class="brand-lg" href="/">
      <div class="title space-x-2">
        <Icon name="mdi:compass-rose" size={32} />
        <p>{YukinaConfig.brandTitle}</p>
      </div>
    </a>
    <div class="menu">
      {
        YukinaConfig.navigators.map((nav) => (
          <a href={nav.href}>
            <p>{i18n(nav.nameKey)}</p>
          </a>
        ))
      }
    </div>
    <div class="toolbar">
      <div class="lg:hidden">
        <MobileSearchBar client:only="svelte" />
      </div>
      <div class="hidden lg:block">
        <SearchBar client:only="svelte" />
      </div>
      <div class="theme">
        <button
          type="button"
          id="theme-switcher"
          aria-label="Alternar entre modo claro e escuro"
        >
          <Icon
            id="theme-icon-light"
            name="line-md:moon-alt-to-sunny-outline-loop-transition"
            size={24}
            class=""
            style=""
          />
          <Icon
            id="theme-icon-dark"
            name="line-md:sunny-outline-to-moon-alt-loop-transition"
            size={24}
            class=""
            style=""
          />
        </button>
      </div>
    </div>
  </div>
  <div id="mobile-menu" class="px-3 transition-all">
    <ul
      id="mobile-menu-nav"
      class="mobile-menu-nav mobile-menu-nav-closed flex flex-col space-y-6 overflow-hidden text-xl font-medium text-[var(--text-color)] transition-all duration-300"
    >
      {
        YukinaConfig.navigators.map((nav) => (
          <li class="mt-1">
            <a href={nav.href} class="mobile-nav-item">
              <div class="flex flex-row items-center space-x-2">
                <span class="text-[var(--primary-color)]">·</span>
                <span>{i18n(nav.nameKey)}</span>
              </div>
              <Icon
                name="cuida:caret-right-outline"
                class="text-[var(--text-color-lighten)]"
              />
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</nav>

<style define:vars={{ navCount }}>
  .nav {
    @apply fixed left-1/2 z-10 flex w-full select-none flex-col justify-end rounded-b-xl bg-[var(--card-color-transparent)] px-2.5 opacity-0 backdrop-blur-md transition-all;
    @apply lg:w-[var(--page-width-lg)] lg:rounded-b-2xl;
    @apply xl:w-[var(--page-width-xl)];
    transform: translateX(-50%) translateY(-5rem);
    animation: 300ms nav-onload-animation;
    animation-fill-mode: forwards;
  }

  .brand {
    @apply flex w-full flex-row items-center justify-between;
    @apply lg:hidden;
  }

  .brand > .title {
    @apply absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 truncate rounded-lg px-4 py-2 text-2xl font-medium text-[var(--primary-color)] transition-all;
    @apply hover:bg-[var(--primary-color-hover)];
    font-family: var(--brand-font);
  }

  .brand button {
    @apply mr-2 flex h-[44px] w-[44px] flex-row items-center rounded-lg text-[var(--text-color)] transition-all;
    @apply hover:bg-[var(--primary-color-hover)] hover:text-[var(--primary-color)];
    @apply lg:hidden;
  }

  .brand .icon {
    @apply w-full text-center text-2xl;
  }

  .brand-lg {
    @apply hidden h-[3.25rem] rounded-lg px-5 font-medium transition-all;
    @apply lg:block;
    @apply hover:bg-[var(--primary-color-hover)];
    @apply active:scale-95;
  }

  .brand-lg > .title {
    @apply flex h-full flex-row content-center items-center text-2xl text-[var(--primary-color)];
    font-family: var(--brand-font);
  }

  .brand-lg .icon {
    @apply mr-2 stroke-2 text-2xl;
  }

  .menu {
    @apply absolute left-1/2 hidden -translate-x-1/2 items-center justify-between space-x-1 text-lg text-[var(--text-color)] opacity-85;
    @apply lg:flex;
  }

  .menu a {
    @apply flex h-[3.25rem] items-center rounded-lg px-6 transition-all;
    @apply hover:bg-[var(--primary-color-hover)] hover:text-[var(--primary-color)];
    @apply active:scale-95;
  }

  .menu p {
    @apply font-medium leading-normal;
    font-family: var(--primary-font);
  }

  .toolbar {
    @apply flex flex-row items-center justify-end space-x-1 lg:mr-2;
  }

  .toolbar button {
    @apply flex w-11 justify-center rounded-lg py-2 text-[var(--text-color)] transition-all;
    @apply hover:bg-[var(--primary-color-hover)] hover:text-[var(--primary-color)];
  }

  .toolbar .icon {
    @apply stroke-2 text-xl;
  }

  .theme {
    @apply flex items-center;
  }

  .theme button {
    @apply flex w-11 justify-center rounded-lg py-2 text-[var(--text-color)] transition-all;
    @apply hover:bg-[var(--primary-color-hover)] hover:text-[var(--primary-color)];
  }

  .theme .icon {
    @apply stroke-2 text-xl;
  }

  .mobile-menu-nav-closed {
    @apply h-0 opacity-0;
  }

  .mobile-menu-nav-opened {
    @apply opacity-100;
    height: calc(var(--navCount) * 52px);
  }

  .mobile-menu-nav li a {
    @apply flex flex-row items-center justify-between;
    font-family: var(--primary-font);
  }

  @keyframes nav-onload-animation {
    0% {
      transform: translateY(-5rem) translateX(-50%);
      opacity: 0;
    }
    100% {
      transform: translateY(0) translateX(-50%);
      opacity: 1;
    }
  }
</style>

<script is:inline>
  /**
   * Reinitializes an SVG icon by cloning it and replacing the original icon with the clone.
   *
   * @param icon - The SVG element to be reinitialized.
   * @returns The cloned SVG element that replaced the original.
   */
  const reinitializeIcon = (icon) => {
    const cloned = icon.cloneNode(true);
    icon.parentNode?.replaceChild(cloned, icon);
    return cloned;
  };

  // menu state
  let isMenuOpen = false;
  let currentTheme = localStorage.getItem("theme") || "light";

  // Function to update the UI based on current state
  function updateUI() {
    // Get all elements
    const menuIconClosed = document.getElementById("menu-icon-closed");
    const menuIconOpened = document.getElementById("menu-icon-opened");
    const mobileMenuNav = document.getElementById("mobile-menu-nav");
    const themeIconLight = document.getElementById("theme-icon-light");
    const themeIconDark = document.getElementById("theme-icon-dark");
    
    // Update menu state
    if (menuIconClosed && menuIconOpened) {
      menuIconClosed.style.display = isMenuOpen ? "none" : "block";
      menuIconOpened.style.display = isMenuOpen ? "block" : "none";
    }
    
    // Update theme state
    if (themeIconLight && themeIconDark) {
      themeIconLight.style.display = currentTheme === "light" ? "block" : "none";
      themeIconDark.style.display = currentTheme === "dark" ? "block" : "none";
    }
    
    // Update mobile menu state
    if (mobileMenuNav) {
      if (isMenuOpen) {
        mobileMenuNav.classList.remove("mobile-menu-nav-closed");
        mobileMenuNav.classList.add("mobile-menu-nav-opened");
      } else {
        mobileMenuNav.classList.remove("mobile-menu-nav-opened");
        mobileMenuNav.classList.add("mobile-menu-nav-closed");
      }
    }
    
    // Update document theme
    document.documentElement.setAttribute("data-theme", currentTheme);
    document.documentElement.classList.toggle("dark", currentTheme === "dark");
  }
  
  // Toggle menu state
  function toggleMenu() {
    isMenuOpen = !isMenuOpen;
    updateUI();
  }
  
  // Toggle theme
  function toggleTheme() {
    currentTheme = currentTheme === "light" ? "dark" : "light";
    localStorage.setItem("theme", currentTheme);
    updateUI();
  }
  
  // Setup click handlers
  function setupClickHandlers() {
    const menuSwitcher = document.getElementById("menu-switcher");
    const themeSwitcher = document.getElementById("theme-switcher");
    const mobileNavItems = document.getElementsByClassName("mobile-nav-item");
    
    // Set direct onclick handlers
    if (menuSwitcher) menuSwitcher.onclick = toggleMenu;
    if (themeSwitcher) themeSwitcher.onclick = toggleTheme;
    
    // Set mobile menu item click handlers
    for (let i = 0; i < mobileNavItems.length; i++) {
      if (mobileNavItems[i]) mobileNavItems[i].onclick = toggleMenu;
    }
    
    // Handle clicks outside menu to close
    document.onclick = function(event) {
      const menuSwitcher = document.getElementById("menu-switcher");
      const mobileMenuNav = document.getElementById("mobile-menu-nav");
      
      if (isMenuOpen && 
          menuSwitcher && !menuSwitcher.contains(event.target) && 
          mobileMenuNav && !mobileMenuNav.contains(event.target)) {
        toggleMenu();
      }
    };
  }
  
  // Initialize everything
  function initAll() {
    updateUI();
    setupClickHandlers();
  }
  
  // Run on load and at intervals to handle navigation
  initAll();
  document.addEventListener("DOMContentLoaded", initAll);
  setInterval(initAll, 100);
  
  // fold nav bar when scroll down
  let lastYPos = 0;
  window.addEventListener("scroll", () => {
    const navBarElement = document.getElementById("nav");
    const bannerElement = document.getElementById("banner");
    const bannerHeight = bannerElement ? bannerElement.offsetHeight - 50 : 0;
    
    if (navBarElement) {
      if (bannerHeight < window.scrollY && window.scrollY > lastYPos) {
        navBarElement.style.top = "-72px";
      } else {
        navBarElement.style.top = "0";
      }
    }
    lastYPos = window.scrollY;
  });
</script>

<script is:inline>
  let pagefindLoaded = false;
  
  async function loadPagefind() {
    if (pagefindLoaded) return window.pagefind;
    
    try {
      const pagefind = await import("/pagefind/pagefind.js");
      await pagefind.options({
        excerptLength: 20,
      });
      pagefind.init();
      window.pagefind = pagefind;
      pagefindLoaded = true;
      return pagefind;
    } catch (error) {
      console.error("Erro ao carregar pagefind:", error);
      return null;
    }
  }
  
  // Exporta a função para o objeto window
  window.loadPagefind = loadPagefind;
  
  // Inicializar pagefind quando o usuário interage com os inputs de busca
  document.addEventListener('DOMContentLoaded', () => {
    // Carregar pagefind quando o usuário interage com qualquer campo de busca
    document.addEventListener('click', (e) => {
      const target = e.target;
      if (target && (
          target.id === 'search-bar-input' || 
          target.id === 'search-bar-input-mobile' ||
          target.closest && (
            target.closest('[for="search-bar-input"]') ||
            target.closest('[for="search-bar-input-mobile"]')
          )
      )) {
        loadPagefind();
      }
    });
  });
</script>
