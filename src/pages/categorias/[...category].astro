---
import Main from "../../layouts/MainLayout.astro";
import { Image } from "astro:assets";
import { GetCategories } from "../../utils/content";
import { getImageSource } from "../../utils/imageImports";

// Corrigindo o parâmetro para 'category'
export async function getStaticPaths() {
  const categorias = await GetCategories();
  return Array.from(categorias.keys()).map((categorySlug) => ({
    params: { category: categorySlug }, // Parâmetro correto
  }));
}

// Usando o parâmetro correto 'category'
const { category } = Astro.params;
const categorias = await GetCategories();
const categoryData = categorias.get(category);

const categoryBanner = {
  title: categoryData?.name || "Categoria",
  subTitle: categoryData?.description || "Escolha o seu artigo!",
  bannerImage: categoryData?.image ? (categoryData.image.startsWith("src/") ? "/" + categoryData.image : categoryData.image) : "/images/default-category-banner.svg",
};

const posts = categoryData?.posts || [];
---

<Main
  title={categoryBanner.title}
  subTitle={categoryBanner.subTitle}
  bannerImage={categoryBanner.bannerImage}
>
  <div class="space-y-8">
    <div class="cities-grid" data-pagefind-body>
      {
        posts.length > 0 ? (
          posts.map((entry) => (
            <div
              class="city-card"
              data-pagefind-body
              data-pagefind-weight="10"
              data-pagefind-meta="title"
            >
              <div class="city-image-container">
                <Image 
                  src={getImageSource(entry.data.attraction_image || entry.data.image)}
                  alt={entry.data.title}
                  width={300}
                  height={200}
                  class="city-background-image"
                />
              </div>
              <a href={entry.id} class="city-link">
                <h3 class="city-title">{entry.data.title}</h3>
                <p class="city-description">{entry.data.description}</p>
              </a>
            </div>
          ))
        ) : (
          <p class="text-center text-gray-500">
            Nenhum post encontrado nesta categoria.
          </p>
        )
      }
    </div>
  </div>
</Main>

<style>
  .cities-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 20px;
    padding: 20px;
  }

  .city-card {
    background-color: #f9f9f9;
    padding: 10px;
    border-radius: 20px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition:
      transform 0.3s cubic-bezier(0.4, 0, 0.2, 1),
      box-shadow 0.3s ease;
    height: 200px;
    color: white;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    position: relative;
    overflow: hidden;
    z-index: 0;
  }
  
  .city-image-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
  }
  
  .city-background-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }

  .city-card::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(to bottom, rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.3));
    z-index: 1;
  }

  .city-card:hover {
    transform: translateY(-5px) scale(1.02);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
  }

  .city-link {
    text-decoration: none;
    color: inherit;
    z-index: 2;
    padding: 15px;
    bottom: 15px;
    box-sizing: border-box;
    background: linear-gradient(
      to top,
      rgba(0, 0, 0, 0.3) 0%,
      rgba(0, 0, 0, 0.5) 100%
    );
    border-radius: 15px; /* Bordas mais arredondadas */
    backdrop-filter: blur(1px);
    margin: auto; /* Centraliza o bloco */
    width: 90%; /* Largura do bloco de texto */
    max-width: 300px; /* Largura máxima */
    text-align: center; /* Alinhamento centralizado */
    position: absolute;
    left: 50%;
    bottom: 38px;
    transform: translateX(-50%); /* Centralização precisa */
    display: flex;
    flex-direction: column;
    align-items: center; /* Alinhamento vertical */
    transition: all 0.3s ease;
  }

  .city-title {
    font-size: 1.5rem;
    margin: 0 0 10px 0;
    text-shadow: 0 2px 6px rgba(0, 0, 0, 0.8);
    font-weight: 700;
    line-height: 1.2;
    width: 100%;
    /* Novas regras */
    max-width: 100%; /* Impede overflow horizontal */
    overflow: hidden;
    white-space: normal;
    display: -webkit-box;
    -webkit-line-clamp: 2; /* Limita a 2 linhas */
    -webkit-box-orient: vertical;
  }

  .city-title::after {
    content: "";
    position: absolute;
    bottom: -8px;
    left: 50%;
    transform: translateX(-50%);
    width: 50px;
    height: 2px;
    background: rgba(255, 255, 255, 0.7);
    transition: width 0.3s ease;
  }

  .city-description {
    font-size: 0.9rem;
    margin: 0;
    color: rgba(255, 255, 255, 0.95);
    line-height: 1.4;
    text-shadow: 0 1px 4px rgba(0, 0, 0, 0.6);
    opacity: 0.9;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .city-card:hover .city-title::after {
    width: 60px;
  }

  .city-card:hover .city-description {
    opacity: 0.95;
    text-shadow: 0 2px 6px rgba(0, 0, 0, 0.5);
  }

  .space-y-8 {
    space-y: 2rem;
  }

  .city-card:hover .city-link {
    background: linear-gradient(
      to top,
      rgba(0, 0, 0, 0.8) 0%,
      rgba(0, 0, 0, 0.4) 100%
    );
    transform: translateX(-50%) scale(1.05); /* Efeito de zoom suave */
  }

  @media (max-width: 480px) {
    .city-title {
      font-size: 1.2rem;
      -webkit-line-clamp: 2;
    }

    .city-description {
      font-size: 0.8rem;
      -webkit-line-clamp: 2;
    }

    .city-link {
      text-decoration: none;
      color: inherit;
      z-index: 2;
      padding: 15px;
      bottom: 15px;
      box-sizing: border-box;
      background: linear-gradient(
        to top,
        rgba(0, 0, 0, 0.3) 0%,
        rgba(0, 0, 0, 0.5) 100%
      );
      border-radius: 15px; /* Bordas mais arredondadas */
      backdrop-filter: blur(1px);
      margin: auto; /* Centraliza o bloco */
      width: 90%; /* Largura do bloco de texto */
      max-width: 300px; /* Largura máxima */
      text-align: center; /* Alinhamento centralizado */
      position: absolute;
      left: 50%;
      bottom: 55px;
      transform: translateX(-50%); /* Centralização precisa */
      display: flex;
      flex-direction: column;
      align-items: center; /* Alinhamento vertical */
      transition: all 0.3s ease;
    }
  }
</style>
